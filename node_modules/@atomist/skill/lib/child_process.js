"use strict";
/*
 * Copyright Â© 2020 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const process = require("process");
const log_1 = require("./log");
/**
 * Convert child process into an informative string.
 *
 * @param cmd Command being run.
 * @param args Arguments to command.
 * @param opts Standard child_process.SpawnOptions.
 */
function childProcessString(cmd, args = [], opts = {}) {
    return (opts.cwd ? opts.cwd : process.cwd()) + " ==> " + cmd +
        (args.length > 0 ? " '" + args.join("' '") + "'" : "");
}
exports.childProcessString = childProcessString;
/**
 * Cross-platform kill a process and all its children using tree-kill.
 * On win32, signal is ignored since win32 does not support different
 * signals.
 *
 * @param pid ID of process to kill.
 * @param signal optional signal name or number, Node.js default is used if not provided
 */
function killProcess(pid, signal) {
    const sig = (signal) ? `signal ${signal}` : "default signal";
    log_1.debug(`Calling tree-kill on child process ${pid} with ${sig}`);
    // Lazy import
    require("tree-kill")(pid, signal); // eslint-disable-line @typescript-eslint/no-var-requires
}
exports.killProcess = killProcess;
/**
 * Safely clear a timer that may be undefined.
 *
 * @param timer A timer that may not be set.
 */
function clearTimer(timer) {
    if (timer) {
        clearTimeout(timer);
    }
    return undefined;
}
/**
 * Call cross-spawn and return a Promise of its result.  The result
 * has the same shape as the object returned by
 * `child_process.spawnSync()`, which means errors are not thrown but
 * returned in the `error` property of the returned object.  If your
 * command will produce lots of output, provide a log to write it to.
 *
 * @param cmd Command to run.  If it is just an executable name, paths
 *            with be searched, batch and command files will be checked,
 *            etc.  See cross-spawn documentation for details.
 * @param args Arguments to command.
 * @param opts Standard child_process.SpawnOptions plus a few specific
 *             to this implementation.
 * @return a Promise that provides information on the child process and
 *         its execution result.  If an error occurs, the `error` property
 *         of [[SpawnPromiseReturns]] will be populated.
 */
async function spawnPromise(cmd, args = [], opts = {}) {
    // Lazy import
    const spawn = await Promise.resolve().then(() => require("cross-spawn"));
    return new Promise(resolve => {
        const optsToUse = Object.assign({ logCommand: true }, opts);
        const cmdString = childProcessString(cmd, args, optsToUse);
        let logEncoding = "utf8";
        if (!optsToUse.encoding) {
            if (optsToUse.log) {
                optsToUse.encoding = "buffer";
            }
            else {
                optsToUse.encoding = "utf8";
            }
        }
        else if (optsToUse.log && optsToUse.encoding !== "buffer") {
            logEncoding = optsToUse.encoding;
            optsToUse.encoding = "buffer";
        }
        function pLog(data) {
            const formatted = (optsToUse.log && optsToUse.log.stripAnsi) ? require("strip-ansi")(data) : data; // eslint-disable-line @typescript-eslint/no-var-requires
            optsToUse.log.write(formatted);
        }
        function commandLog(data, l = log_1.debug) {
            if (optsToUse.log && optsToUse.logCommand) {
                const terminated = (data.endsWith("\n")) ? data : data + "\n";
                pLog(terminated);
            }
            else {
                l(data);
            }
        }
        log_1.debug(`Spawning: ${cmdString}`);
        const childProcess = spawn(cmd, args, optsToUse);
        commandLog(`Spawned: ${cmdString} (PID ${childProcess.pid})`);
        let timer;
        if (optsToUse.timeout) {
            timer = setTimeout(() => {
                commandLog(`Child process timeout expired, killing command: ${cmdString}`, log_1.warn);
                killProcess(childProcess.pid, optsToUse.killSignal);
            }, optsToUse.timeout);
        }
        let stderr = "";
        let stdout = "";
        if (optsToUse.log) {
            const logData = (data) => {
                pLog(data.toString(logEncoding));
            };
            childProcess.stderr.on("data", logData);
            childProcess.stdout.on("data", logData);
            stderr = stdout = "See log\n";
        }
        else {
            childProcess.stderr.on("data", (data) => stderr += data);
            childProcess.stdout.on("data", (data) => stdout += data);
        }
        childProcess.on("exit", (code, signal) => {
            timer = clearTimer(timer);
            log_1.debug(`Child process exit with code ${code} and signal ${signal}: ${cmdString}`);
        });
        /* tslint:disable:no-null-keyword */
        childProcess.on("close", (code, signal) => {
            timer = clearTimer(timer);
            commandLog(`Child process close with code ${code} and signal ${signal}: ${cmdString}`);
            resolve({
                cmdString,
                pid: childProcess.pid,
                output: [null, stdout, stderr],
                stdout,
                stderr,
                status: code,
                signal,
                error: null,
            });
        });
        childProcess.on("error", err => {
            timer = clearTimer(timer);
            err.message = `Failed to run command: ${cmdString}: ${err.message}`;
            commandLog(err.message, log_1.error);
            resolve({
                cmdString,
                pid: childProcess.pid,
                output: [null, stdout, stderr],
                stdout,
                stderr,
                status: null,
                signal: null,
                error: err,
            });
        });
        /* tslint:enable:no-null-keyword */
    });
}
exports.spawnPromise = spawnPromise;
/**
 * Error thrown when a command cannot be executed, the command is
 * killed by a signal, or returns a non-zero exit status.
 */
class ExecPromiseError extends Error {
    constructor(
    /** Message describing reason for failure. */
    message, 
    /** Command PID. */
    pid, 
    /** stdio */
    output, 
    /** Child process standard output. */
    stdout, 
    /** Child process standard error. */
    stderr, 
    /** Child process exit status. */
    status, 
    /** Signal that killed the process, if any. */
    signal) {
        super(message);
        this.message = message;
        this.pid = pid;
        this.output = output;
        this.stdout = stdout;
        this.stderr = stderr;
        this.status = status;
        this.signal = signal;
        Object.setPrototypeOf(this, new.target.prototype);
    }
    /** Create an ExecError from a SpawnSyncReturns<string> */
    static fromSpawnReturns(r) {
        return new ExecPromiseError(r.error.message, r.pid, r.output, r.stdout, r.stderr, r.status, r.signal);
    }
}
exports.ExecPromiseError = ExecPromiseError;
/**
 * Run a child process using cross-spawn, capturing and returning
 * stdout and stderr, like exec, in a promise.  If an error occurs,
 * the process is killed by a signal, or the process exits with a
 * non-zero status, the Promise is rejected.  Any provided `stdio`
 * option is ignored, being overwritten with `["pipe","pipe","pipe"]`.
 * Like with child_process.exec, this is not a good choice if the
 * command produces a large amount of data on stdout or stderr.
 *
 * @param cmd name of command, can be a shell script or MS Windows
 *            .bat or .cmd
 * @param args command arguments
 * @param opts standard child_process.SpawnOptions
 * @return Promise resolving to exec-like callback arguments having
 *         stdout and stderr properties.  If an error occurs, exits
 *         with a non-zero status, and killed with a signal, the
 *         Promise is rejected with an [[ExecPromiseError]].
 */
async function execPromise(cmd, args = [], opts = {}) {
    opts.stdio = ["pipe", "pipe", "pipe"];
    if (!opts.encoding) {
        opts.encoding = "utf8";
    }
    const result = await spawnPromise(cmd, args, opts);
    if (result.error) {
        throw ExecPromiseError.fromSpawnReturns(result);
    }
    if (result.status) {
        const msg = `Child process ${result.pid} exited with non-zero status ${result.status}: ${result.cmdString}\n${result.stderr}`;
        log_1.error(msg);
        result.error = new Error(msg);
        throw ExecPromiseError.fromSpawnReturns(result);
    }
    if (result.signal) {
        const msg = `Child process ${result.pid} received signal ${result.signal}: ${result.cmdString}\n${result.stderr}`;
        log_1.error(msg);
        result.error = new Error(msg);
        throw ExecPromiseError.fromSpawnReturns(result);
    }
    return { stdout: result.stdout, stderr: result.stderr };
}
exports.execPromise = execPromise;
//# sourceMappingURL=child_process.js.map