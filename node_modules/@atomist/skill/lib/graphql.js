"use strict";
/*
 * Copyright Â© 2020 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const log_1 = require("./log");
const util_1 = require("./util");
const GraphQLCache = new Map();
class NodeFetchGraphQLClient {
    constructor(apiKey, url) {
        this.apiKey = apiKey;
        this.url = url;
    }
    async query(query, variables) {
        const f = (await Promise.resolve().then(() => require("node-fetch"))).default;
        const body = JSON.stringify({
            query: await this.graphql(query, "query"),
            variables,
        });
        log_1.debug(`GraphQL query: ${body}`);
        const result = await (await f(this.url, {
            method: "post",
            body,
            headers: {
                "authorization": `bearer ${this.apiKey}`,
                "content-type": "application/json",
            },
        })).json();
        log_1.debug(`GraphQL result: ${JSON.stringify(result, util_1.replacer)}`);
        if (result.errors) {
            throw new Error(JSON.stringify(result.errors, undefined, 2));
        }
        return result.data;
    }
    async mutate(mutation, variables) {
        const f = (await Promise.resolve().then(() => require("node-fetch"))).default;
        const body = JSON.stringify({
            query: await this.graphql(mutation, "mutation"),
            variables,
        });
        log_1.debug(`GraphQL mutation: ${body}`);
        const result = await (await f(this.url, {
            method: "post",
            body,
            headers: {
                "authorization": `bearer ${this.apiKey}`,
                "content-type": "application/json",
            },
        })).json();
        log_1.debug(`GraphQL result: ${JSON.stringify(result, util_1.replacer)}`);
        if (result.errors) {
            throw new Error(JSON.stringify(result.errors, undefined, 2));
        }
        return result.data;
    }
    async graphql(query, prefix) {
        if (typeof query === "string") {
            let q = query === null || query === void 0 ? void 0 : query.trim();
            if (GraphQLCache.has(query)) {
                return GraphQLCache.get(query);
            }
            else if (q.endsWith(".graphql")) {
                const p = path.join(__dirname, "..", "..", "..", "..", "graphql", prefix, q);
                q = (await fs.readFile(p)).toString();
            }
            q = q.replace(/\n/g, "");
            GraphQLCache.set(query, q);
            return q;
        }
        else {
            const l = query;
            const p = path.resolve(l.root, l.path);
            if (GraphQLCache.has(p)) {
                return GraphQLCache.get(p);
            }
            else {
                let q = (await fs.readFile(p)).toString();
                q = q.replace(/\n/g, "");
                GraphQLCache.set(p, q);
                return q;
            }
        }
    }
}
function createGraphQLClient(apiKey, wid) {
    const url = `${process.env.ATOMIST_GRAPHQL_ENDPOINT
        || process.env.GRAPHQL_ENDPOINT
        || "https://automation.atomist.com/graphql"}/team/${wid}`;
    return new NodeFetchGraphQLClient(apiKey, url);
}
exports.createGraphQLClient = createGraphQLClient;
//# sourceMappingURL=graphql.js.map