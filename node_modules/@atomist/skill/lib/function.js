"use strict";
/*
 * Copyright Â© 2020 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-import-side-effect
require("source-map-support/register");
const skill_logging_1 = require("@atomist/skill-logging");
const context_1 = require("./context");
const log_1 = require("./log");
const message_1 = require("./message");
const parameter_prompt_1 = require("./parameter_prompt");
const payload_1 = require("./payload");
const util_1 = require("./util");
exports.entryPoint = async (pubSubEvent, context) => {
    const attributes = Object.assign(Object.assign({}, (pubSubEvent.attributes || {})), { eventId: context.eventId });
    log_1.debug(`atm:attributes=${JSON.stringify(attributes)}`);
    const payload = JSON.parse(Buffer.from(pubSubEvent.data, "base64").toString());
    log_1.info(`Incoming pub/sub message: ${JSON.stringify(payload, util_1.replacer)}`);
    // debug(`Incoming message context: ${JSON.stringify(context, replacer)}`);
    // debug(`Incoming message: ${JSON.stringify(pubSubEvent, replacer)}`);
    if (payload_1.isEventIncoming(payload)) {
        await processEvent(payload, context);
    }
    else if (payload_1.isCommandIncoming(payload)) {
        await processCommand(payload, context);
    }
};
async function processEvent(event, ctx) {
    const context = context_1.createContext(event, ctx);
    try {
        const path = await util_1.requirePath(`events/${context.name}`);
        log_1.debug(`Invoking event handler '${context.name}'`);
        const handler = require(path).handler;
        const result = await handler(context);
        await context.message.publish(message_1.prepareStatus(result || { code: 0 }, context));
    }
    catch (e) {
        await context.audit.log(`Error occurred: ${e.stack}`, skill_logging_1.Severity.ERROR);
        await context.message.publish(message_1.prepareStatus(e, context));
    }
    log_1.debug(`Completed event handler '${context.name}'`);
}
exports.processEvent = processEvent;
async function processCommand(event, ctx) {
    const context = context_1.createContext(event, ctx);
    try {
        const path = await util_1.requirePath(`commands/${context.name}`);
        log_1.debug(`Invoking command handler '${context.name}'`);
        const handler = require(path).handler;
        const result = await handler(context);
        await context.message.publish(message_1.prepareStatus(result || { code: 0 }, context));
    }
    catch (e) {
        if (e instanceof parameter_prompt_1.CommandListenerExecutionInterruptError) {
            await context.message.publish(message_1.prepareStatus({ code: 0 }, context));
        }
        else {
            await context.audit.log(`Error occurred: ${e.stack}`, skill_logging_1.Severity.ERROR);
            await context.message.publish(message_1.prepareStatus(e, context));
        }
    }
    log_1.debug(`Completed command handler '${context.name}'`);
}
exports.processCommand = processCommand;
//# sourceMappingURL=function.js.map