"use strict";
/*
 * Copyright Â© 2020 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const logging_1 = require("@atomist/skill-logging/lib/logging");
const graphql_1 = require("./graphql");
const http_1 = require("./http");
const message_1 = require("./message");
const parameter_prompt_1 = require("./parameter_prompt");
const payload_1 = require("./payload");
const project_1 = require("./project");
const secrets_1 = require("./secrets");
const storage_1 = require("./storage");
const util_1 = require("./util");
function createContext(payload, ctx) {
    var _a, _b;
    const apiKey = (_b = (_a = payload === null || payload === void 0 ? void 0 : payload.secrets) === null || _a === void 0 ? void 0 : _a.find(s => s.uri === "atomist://api-key")) === null || _b === void 0 ? void 0 : _b.value;
    const wid = payload_1.workspaceId(payload);
    const graphql = graphql_1.createGraphQLClient(apiKey, wid);
    const storage = storage_1.createStorageProvider();
    const credential = new secrets_1.DefaultCredentialProvider(graphql, payload);
    if (payload_1.isCommandIncoming(payload)) {
        if (payload.raw_message) {
            const parameters = util_1.extractParameters(payload.raw_message);
            payload.parameters.push(...parameters);
        }
        const message = new message_1.PubSubCommandMessageClient(payload, graphql);
        return Object.assign(Object.assign({ parameters: {
                prompt: parameter_prompt_1.commandRequestParameterPromptFactory(message, payload),
            }, name: payload.command, correlationId: payload.correlation_id, executionId: ctx.eventId, workspaceId: wid, credential,
            graphql, http: http_1.createHttpClient(), audit: logging_1.createLogger({
                eventId: ctx.eventId,
                correlationId: payload.correlation_id,
                workspaceId: wid,
            }, {
                name: payload.command,
            }), storage,
            message, project: project_1.createProjectLoader(), trigger: payload }, extractConfiguration(payload)), { skill: payload.skill });
    }
    else if (payload_1.isEventIncoming(payload)) {
        return Object.assign(Object.assign({ data: payload.data, name: payload.extensions.operationName, correlationId: payload.extensions.correlation_id, executionId: ctx.eventId, workspaceId: wid, credential,
            graphql, http: http_1.createHttpClient(), audit: logging_1.createLogger({
                eventId: ctx.eventId,
                correlationId: payload.extensions.correlation_id,
                workspaceId: wid,
            }, {
                name: payload.extensions.operationName,
            }), storage, message: new message_1.PubSubEventMessageClient(payload, graphql), project: project_1.createProjectLoader(), trigger: payload }, extractConfiguration(payload)), { skill: payload.skill });
    }
    return undefined;
}
exports.createContext = createContext;
function extractConfiguration(payload) {
    var _a, _b, _c;
    return {
        configuration: (_c = (_b = (_a = payload.skill) === null || _a === void 0 ? void 0 : _a.configuration) === null || _b === void 0 ? void 0 : _b.instances) === null || _c === void 0 ? void 0 : _c.map(c => ({
            name: c.name,
            parameters: extractConfigurationParameters(c.parameters),
            resourceProviders: extractConfigurationResourceProviders(c.resourceProviders),
        })),
    };
}
function extractConfigurationParameters(params) {
    const parameters = {};
    params === null || params === void 0 ? void 0 : params.forEach(p => parameters[p.name] = p.value);
    return parameters;
}
function extractConfigurationResourceProviders(params) {
    const resourceProviders = {};
    params === null || params === void 0 ? void 0 : params.forEach(p => resourceProviders[p.name] = { typeName: p.typeName, selectedResourceProviders: p.selectedResourceProviders });
    return resourceProviders;
}
//# sourceMappingURL=context.js.map