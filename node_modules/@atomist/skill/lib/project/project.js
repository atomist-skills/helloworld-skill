"use strict";
/*
 * Copyright Â© 2020 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const child_process_1 = require("../child_process");
const log_1 = require("../log");
const clone_1 = require("./clone");
async function load(id, baseDir) {
    const project = {
        path: (...elements) => path.join(baseDir, ...(elements || [])),
        spawn: (cmd, args, opts) => child_process_1.spawnPromise(cmd, args, Object.assign({ log, cwd: baseDir }, (opts || {}))),
        exec: (cmd, args, opts) => child_process_1.execPromise(cmd, args, Object.assign({ cwd: baseDir }, (opts || {}))),
    };
    await setUserConfig(project);
    return project;
}
exports.load = load;
async function clone(id, options) {
    const baseDir = await clone_1.doClone(id, options);
    const project = {
        path: (...elements) => path.join(baseDir, ...(elements || [])),
        spawn: (cmd, args, opts) => child_process_1.spawnPromise(cmd, args, Object.assign({ log, cwd: baseDir }, (opts || {}))),
        exec: (cmd, args, opts) => child_process_1.execPromise(cmd, args, Object.assign({ cwd: baseDir }, (opts || {}))),
    };
    await setUserConfig(project);
    return project;
}
exports.clone = clone;
async function setUserConfig(project) {
    await project.exec("git", ["config", "user.name", "Atomist Bot"]);
    await project.exec("git", ["config", "user.email", "bot@atomist.com"]);
}
const log = {
    write: (msg) => {
        let line = msg;
        if (line.endsWith("\n")) {
            line = line.slice(0, -2);
        }
        const lines = line.split("\n");
        lines.forEach(l => log_1.debug(l.trimRight()));
    },
};
//# sourceMappingURL=project.js.map