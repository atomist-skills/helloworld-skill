"use strict";
/*
 * Copyright Â© 2020 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const project_1 = require("./project/project");
function gitHubComRepository(details) {
    return Object.assign(Object.assign({}, details), { type: RepositoryProviderType.GitHubCom, cloneUrl: () => {
            if (details.credential) {
                // GitHub App tokens start with v1. and are expected in the password field
                if (details.credential.token.startsWith("v1.")) {
                    return `https://atomist:${details.credential.token}@github.com/${details.owner}/${details.repo}.git`;
                }
                else {
                    return `https://${details.credential.token}:x-oauth-basic@github.com/${details.owner}/${details.repo}.git`;
                }
            }
            else {
                return `https://github.com/${details.owner}/${details.repo}.git`;
            }
        } });
}
exports.gitHubComRepository = gitHubComRepository;
var RepositoryProviderType;
(function (RepositoryProviderType) {
    RepositoryProviderType[RepositoryProviderType["GitHubCom"] = 0] = "GitHubCom";
    RepositoryProviderType[RepositoryProviderType["GitHubEnterprise"] = 1] = "GitHubEnterprise";
})(RepositoryProviderType = exports.RepositoryProviderType || (exports.RepositoryProviderType = {}));
function createProjectLoader() {
    return new DefaultProjectLoader();
}
exports.createProjectLoader = createProjectLoader;
class DefaultProjectLoader {
    async load(id, baseDir) {
        return project_1.load(id, baseDir);
    }
    async clone(id, options) {
        return project_1.clone(id, options);
    }
}
exports.DefaultProjectLoader = DefaultProjectLoader;
//# sourceMappingURL=project.js.map