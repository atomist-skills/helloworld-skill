import { GraphQLClient } from "./graphql";
import { CommandIncoming, EventIncoming } from "./payload";
export declare type CredentialResolver<T> = (graphClient: GraphQLClient, payload: CommandIncoming | EventIncoming) => Promise<T>;
export interface GitHubCredential {
    token: string;
    scopes: string[];
}
export interface GitHubAppCredential {
    token: string;
    permissions: Record<string, "write" | "read">;
}
export declare function isGitHubCredential(spec: any): spec is GitHubCredential;
export declare function isGitHubAppCredential(spec: any): spec is GitHubAppCredential;
export declare function gitHubUserToken(): CredentialResolver<GitHubCredential>;
export declare function gitHubAppToken(id: {
    owner: string;
    repo: string;
    apiUrl?: string;
} | string): CredentialResolver<GitHubAppCredential | GitHubCredential>;
export interface CredentialProvider {
    resolve<T>(spec: CredentialResolver<T>): Promise<T | undefined>;
}
export declare class DefaultCredentialProvider implements CredentialProvider {
    private readonly graphClient;
    private readonly payload;
    constructor(graphClient: GraphQLClient, payload: CommandIncoming | EventIncoming);
    resolve<T>(spec: CredentialResolver<T>): Promise<T>;
}
//# sourceMappingURL=secrets.d.ts.map