"use strict";
/*
 * Copyright Â© 2020 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const slack_messages_1 = require("@atomist/slack-messages");
const util_1 = require("./util");
/* eslint-disable @typescript-eslint/camelcase */
function slackSuccessMessage(title, text, ctx, options = {}) {
    const msg = {
        attachments: [Object.assign({ author_icon: `https://images.atomist.com/rug/check-circle.gif?gif=${util_1.guid()}`, author_name: title, text, fallback: text, color: "#37A745", mrkdwn_in: ["text"], footer: slackFooter(ctx), ts: slackTs() }, options)],
    };
    return msg;
}
exports.slackSuccessMessage = slackSuccessMessage;
function slackQuestionMessage(title, text, ctx, options = {}) {
    const msg = {
        attachments: [Object.assign({ author_icon: `https://images.atomist.com/rug/question.png`, author_name: title, text, fallback: text, color: "#B5B5B5", mrkdwn_in: ["text"], footer: slackFooter(ctx), ts: slackTs() }, options)],
    };
    return msg;
}
exports.slackQuestionMessage = slackQuestionMessage;
function slackInfoMessage(title, text, ctx, options = {}) {
    const msg = {
        attachments: [Object.assign({ author_icon: `https://images.atomist.com/rug/info.png`, author_name: title, text, fallback: text, color: "#B5B5B5", mrkdwn_in: ["text"], footer: slackFooter(ctx), ts: slackTs() }, options)],
    };
    return msg;
}
exports.slackInfoMessage = slackInfoMessage;
function slackWarningMessage(title, text, ctx, options = {}) {
    const msg = {
        attachments: [Object.assign({ author_icon: `https://images.atomist.com/rug/warning-yellow.png`, author_name: title, text, fallback: text, color: "#D7B958", mrkdwn_in: ["text"], footer: slackSupportLink(ctx), ts: slackTs() }, options)],
    };
    return msg;
}
exports.slackWarningMessage = slackWarningMessage;
function slackErrorMessage(title, text, ctx, options = {}) {
    const msg = {
        attachments: [Object.assign({ author_icon: "https://images.atomist.com/rug/error-circle.png", author_name: title, text, fallback: text, color: "#BC3D33", mrkdwn_in: ["text"], footer: slackSupportLink(ctx), ts: slackTs() }, options)],
    };
    return msg;
}
exports.slackErrorMessage = slackErrorMessage;
function slackSupportLink(ctx) {
    const supportUrl = `https://atomist.typeform.com/to/yvnyOj?message_id=${Buffer.from(ctx.correlationId).toString("base64")}`;
    return `${slackFooter(ctx)} \u00B7 ${slack_messages_1.url(supportUrl, "Support")}`;
}
exports.slackSupportLink = slackSupportLink;
function slackFooter(ctx) {
    return `${ctx.skill.namespace}/${ctx.skill.name}`;
}
exports.slackFooter = slackFooter;
function slackTs() {
    return Math.floor(Date.now() / 1000);
}
exports.slackTs = slackTs;
//# sourceMappingURL=messages.js.map