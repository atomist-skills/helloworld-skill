"use strict";
/*
 * Copyright Â© 2020 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const logging_1 = require("@google-cloud/logging");
/**
 * Severity of User-facing skill logging
 *
 * Note: This starts at INFO level because everything below should
 * be considered debug output considered for the skill author only.
 */
var Severity;
(function (Severity) {
    Severity[Severity["INFO"] = 0] = "INFO";
    Severity[Severity["WARNING"] = 1] = "WARNING";
    Severity[Severity["ERROR"] = 2] = "ERROR";
})(Severity = exports.Severity || (exports.Severity = {}));
/**
 * Create an instance of Logger from the current GCF context object
 * @param context the context parameter passed into the GCF handler entry point
 * @param labels additional labels to be added to the audit log
 */
function createLogger(context, labels = {}, name = "skills_audit", project) {
    if (!context || !context.correlationId || !context.workspaceId) {
        throw new Error(`Provided context is missing correlationId and/or workspaceId: ${JSON.stringify(context)}`);
    }
    const logging = new logging_1.Logging({
        projectId: project,
    });
    const log = logging.log(name);
    return {
        log: async (msg, severity = Severity.INFO, labelss = {}) => {
            const metadata = {
                labels: Object.assign(Object.assign(Object.assign({}, labels), labelss), { execution_id: context.eventId, correlation_id: context.correlationId, workspace_id: context.workspaceId }),
                resource: {
                    type: "global",
                },
            };
            const entries = [];
            if (Array.isArray(msg)) {
                entries.push(...msg.map(m => log.entry(metadata, m)));
            }
            else {
                entries.push(log.entry(metadata, msg));
            }
            switch (severity) {
                case Severity.WARNING:
                    await log.warning(entries);
                    break;
                case Severity.ERROR:
                    await log.error(entries);
                    break;
                default:
                    await log.info(entries);
                    break;
            }
        },
    };
}
exports.createLogger = createLogger;
//# sourceMappingURL=logging.js.map